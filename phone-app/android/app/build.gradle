def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 30

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.phone_app"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        externalNativeBuild {
            cmake {
                cppFlags '-std=gnu++17'
                arguments "-DSEAL_BUILD_SEAL_C=1",
                        "-DSEAL_USE_INTRIN=1",
                        "-DSEAL_ARM64_EXITCODE=0",
                        "-DSEAL_ARM64_EXITCODE__TRYRUN_OUTPUT=''",
                        "-DSEAL___BUILTIN_CLZLL_FOUND_EXITCODE=0",
                        "-DSEAL___BUILTIN_CLZLL_FOUND_EXITCODE__TRYRUN_OUTPUT=''",
                        "-DSEAL__ADDCARRY_U64_FOUND_EXITCODE=0",
                        "-DSEAL__ADDCARRY_U64_FOUND_EXITCODE__TRYRUN_OUTPUT=''",
                        "-DSEAL__SUBBORROW_U64_FOUND_EXITCODE=0",
                        "-DSEAL__SUBBORROW_U64_FOUND_EXITCODE__TRYRUN_OUTPUT=''",
                        "-DSEAL_USE_MSGSL=OFF"
            }
        }
        ndk {
            abiFilters 'x86_64'
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
    externalNativeBuild {
        cmake {
            path file('../../../he-component/bridge/android/CMakeLists.txt')
            version "3.12.0+"
        }
    }
    ndkVersion "23.1.7779620"
}

flutter {
    source '../..'
}
